package com.schonherz.dbentities;

import java.util.List;
import com.schonherz.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table Munkatipusok.
 */
public class MunkaTipus {

    private Long munkaTipusID;
    private String munkaTipusNev;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MunkaTipusDao myDao;

    private List<Munka> munkaList;

    public MunkaTipus() {
    }

    public MunkaTipus(Long munkaTipusID) {
        this.munkaTipusID = munkaTipusID;
    }

    public MunkaTipus(Long munkaTipusID, String munkaTipusNev) {
        this.munkaTipusID = munkaTipusID;
        this.munkaTipusNev = munkaTipusNev;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMunkaTipusDao() : null;
    }

    public Long getMunkaTipusID() {
        return munkaTipusID;
    }

    public void setMunkaTipusID(Long munkaTipusID) {
        this.munkaTipusID = munkaTipusID;
    }

    public String getMunkaTipusNev() {
        return munkaTipusNev;
    }

    public void setMunkaTipusNev(String munkaTipusNev) {
        this.munkaTipusNev = munkaTipusNev;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Munka> getMunkaList() {
        if (munkaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MunkaDao targetDao = daoSession.getMunkaDao();
            munkaList = targetDao._queryMunkaTipus_MunkaList(munkaTipusID);
        }
        return munkaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMunkaList() {
        munkaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

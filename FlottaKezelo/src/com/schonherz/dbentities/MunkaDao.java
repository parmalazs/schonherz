package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.schonherz.dbentities.Munka;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Munkak.
*/
public class MunkaDao extends AbstractDao<Munka, Long> {

    public static final String TABLENAME = "Munkak";

    /**
     * Properties of entity Munka.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MunkaID = new Property(0, Long.class, "munkaID", true, "MUNKA_ID");
        public final static Property MunkaKoltseg = new Property(1, Long.class, "munkaKoltseg", false, "MUNKA_KOLTSEG");
        public final static Property MunkaBevetel = new Property(2, Long.class, "munkaBevetel", false, "MUNKA_BEVETEL");
        public final static Property MunkaUzemanyagState = new Property(3, Long.class, "munkaUzemanyagState", false, "MUNKA_UZEMANYAG_STATE");
        public final static Property MunkaComment = new Property(4, String.class, "munkaComment", false, "MUNKA_COMMENT");
        public final static Property MunkaBefejezesDate = new Property(5, String.class, "munkaBefejezesDate", false, "MUNKA_BEFEJEZES_DATE");
        public final static Property MunkaIsActive = new Property(6, Boolean.class, "munkaIsActive", false, "MUNKA_IS_ACTIVE");
        public final static Property MunkaEstimatedTime = new Property(7, Long.class, "munkaEstimatedTime", false, "MUNKA_ESTIMATED_TIME");
        public final static Property MunkaDate = new Property(8, String.class, "munkaDate", false, "MUNKA_DATE");
        public final static Property SoforID = new Property(9, Long.class, "soforID", false, "SOFOR_ID");
        public final static Property PartnerID = new Property(10, Long.class, "partnerID", false, "PARTNER_ID");
        public final static Property TelephelyID = new Property(11, Long.class, "telephelyID", false, "TELEPHELY_ID");
        public final static Property MunkaTipusID = new Property(12, Long.class, "munkaTipusID", false, "MUNKA_TIPUS_ID");
    };

    private DaoSession daoSession;

    private Query<Munka> sofor_MunkaListQuery;
    private Query<Munka> partner_MunkaListQuery;
    private Query<Munka> telephely_MunkaListQuery;
    private Query<Munka> munkaTipus_MunkaListQuery;

    public MunkaDao(DaoConfig config) {
        super(config);
    }
    
    public MunkaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Munkak' (" + //
                "'MUNKA_ID' INTEGER PRIMARY KEY ," + // 0: munkaID
                "'MUNKA_KOLTSEG' INTEGER," + // 1: munkaKoltseg
                "'MUNKA_BEVETEL' INTEGER," + // 2: munkaBevetel
                "'MUNKA_UZEMANYAG_STATE' INTEGER," + // 3: munkaUzemanyagState
                "'MUNKA_COMMENT' TEXT," + // 4: munkaComment
                "'MUNKA_BEFEJEZES_DATE' TEXT," + // 5: munkaBefejezesDate
                "'MUNKA_IS_ACTIVE' INTEGER," + // 6: munkaIsActive
                "'MUNKA_ESTIMATED_TIME' INTEGER," + // 7: munkaEstimatedTime
                "'MUNKA_DATE' TEXT," + // 8: munkaDate
                "'SOFOR_ID' INTEGER," + // 9: soforID
                "'PARTNER_ID' INTEGER," + // 10: partnerID
                "'TELEPHELY_ID' INTEGER," + // 11: telephelyID
                "'MUNKA_TIPUS_ID' INTEGER);"); // 12: munkaTipusID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Munkak'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Munka entity) {
        stmt.clearBindings();
 
        Long munkaID = entity.getMunkaID();
        if (munkaID != null) {
            stmt.bindLong(1, munkaID);
        }
 
        Long munkaKoltseg = entity.getMunkaKoltseg();
        if (munkaKoltseg != null) {
            stmt.bindLong(2, munkaKoltseg);
        }
 
        Long munkaBevetel = entity.getMunkaBevetel();
        if (munkaBevetel != null) {
            stmt.bindLong(3, munkaBevetel);
        }
 
        Long munkaUzemanyagState = entity.getMunkaUzemanyagState();
        if (munkaUzemanyagState != null) {
            stmt.bindLong(4, munkaUzemanyagState);
        }
 
        String munkaComment = entity.getMunkaComment();
        if (munkaComment != null) {
            stmt.bindString(5, munkaComment);
        }
 
        String munkaBefejezesDate = entity.getMunkaBefejezesDate();
        if (munkaBefejezesDate != null) {
            stmt.bindString(6, munkaBefejezesDate);
        }
 
        Boolean munkaIsActive = entity.getMunkaIsActive();
        if (munkaIsActive != null) {
            stmt.bindLong(7, munkaIsActive ? 1l: 0l);
        }
 
        Long munkaEstimatedTime = entity.getMunkaEstimatedTime();
        if (munkaEstimatedTime != null) {
            stmt.bindLong(8, munkaEstimatedTime);
        }
 
        String munkaDate = entity.getMunkaDate();
        if (munkaDate != null) {
            stmt.bindString(9, munkaDate);
        }
 
        Long soforID = entity.getSoforID();
        if (soforID != null) {
            stmt.bindLong(10, soforID);
        }
 
        Long partnerID = entity.getPartnerID();
        if (partnerID != null) {
            stmt.bindLong(11, partnerID);
        }
 
        Long telephelyID = entity.getTelephelyID();
        if (telephelyID != null) {
            stmt.bindLong(12, telephelyID);
        }
 
        Long munkaTipusID = entity.getMunkaTipusID();
        if (munkaTipusID != null) {
            stmt.bindLong(13, munkaTipusID);
        }
    }

    @Override
    protected void attachEntity(Munka entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Munka readEntity(Cursor cursor, int offset) {
        Munka entity = new Munka( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // munkaID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // munkaKoltseg
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // munkaBevetel
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // munkaUzemanyagState
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // munkaComment
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // munkaBefejezesDate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // munkaIsActive
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // munkaEstimatedTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // munkaDate
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // soforID
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // partnerID
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // telephelyID
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // munkaTipusID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Munka entity, int offset) {
        entity.setMunkaID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMunkaKoltseg(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMunkaBevetel(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMunkaUzemanyagState(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMunkaComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMunkaBefejezesDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMunkaIsActive(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setMunkaEstimatedTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setMunkaDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSoforID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPartnerID(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setTelephelyID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setMunkaTipusID(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Munka entity, long rowId) {
        entity.setMunkaID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Munka entity) {
        if(entity != null) {
            return entity.getMunkaID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "munkaList" to-many relationship of Sofor. */
    public synchronized List<Munka> _querySofor_MunkaList(Long soforID) {
        if (sofor_MunkaListQuery == null) {
            QueryBuilder<Munka> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.SoforID.eq(soforID));
            sofor_MunkaListQuery = queryBuilder.build();
        } else {
            sofor_MunkaListQuery.setParameter(0, soforID);
        }
        return sofor_MunkaListQuery.list();
    }

    /** Internal query to resolve the "munkaList" to-many relationship of Partner. */
    public synchronized List<Munka> _queryPartner_MunkaList(Long partnerID) {
        if (partner_MunkaListQuery == null) {
            QueryBuilder<Munka> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.PartnerID.eq(partnerID));
            partner_MunkaListQuery = queryBuilder.build();
        } else {
            partner_MunkaListQuery.setParameter(0, partnerID);
        }
        return partner_MunkaListQuery.list();
    }

    /** Internal query to resolve the "munkaList" to-many relationship of Telephely. */
    public synchronized List<Munka> _queryTelephely_MunkaList(Long telephelyID) {
        if (telephely_MunkaListQuery == null) {
            QueryBuilder<Munka> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.TelephelyID.eq(telephelyID));
            telephely_MunkaListQuery = queryBuilder.build();
        } else {
            telephely_MunkaListQuery.setParameter(0, telephelyID);
        }
        return telephely_MunkaListQuery.list();
    }

    /** Internal query to resolve the "munkaList" to-many relationship of MunkaTipus. */
    public synchronized List<Munka> _queryMunkaTipus_MunkaList(Long munkaTipusID) {
        if (munkaTipus_MunkaListQuery == null) {
            QueryBuilder<Munka> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.MunkaTipusID.eq(munkaTipusID));
            munkaTipus_MunkaListQuery = queryBuilder.build();
        } else {
            munkaTipus_MunkaListQuery.setParameter(0, munkaTipusID);
        }
        return munkaTipus_MunkaListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSoforDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPartnerDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTelephelyDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getMunkaTipusDao().getAllColumns());
            builder.append(" FROM Munkak T");
            builder.append(" LEFT JOIN Soforok T0 ON T.'SOFOR_ID'=T0.'SOFOR_ID'");
            builder.append(" LEFT JOIN Partnerek T1 ON T.'PARTNER_ID'=T1.'PARTNER_ID'");
            builder.append(" LEFT JOIN Telephelyek T2 ON T.'TELEPHELY_ID'=T2.'TELEPHELY_ID'");
            builder.append(" LEFT JOIN Munkatipusok T3 ON T.'MUNKA_TIPUS_ID'=T3.'MUNKA_TIPUS_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Munka loadCurrentDeep(Cursor cursor, boolean lock) {
        Munka entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sofor sofor = loadCurrentOther(daoSession.getSoforDao(), cursor, offset);
        entity.setSofor(sofor);
        offset += daoSession.getSoforDao().getAllColumns().length;

        Partner partner = loadCurrentOther(daoSession.getPartnerDao(), cursor, offset);
        entity.setPartner(partner);
        offset += daoSession.getPartnerDao().getAllColumns().length;

        Telephely telephely = loadCurrentOther(daoSession.getTelephelyDao(), cursor, offset);
        entity.setTelephely(telephely);
        offset += daoSession.getTelephelyDao().getAllColumns().length;

        MunkaTipus munkaTipus = loadCurrentOther(daoSession.getMunkaTipusDao(), cursor, offset);
        entity.setMunkaTipus(munkaTipus);

        return entity;    
    }

    public Munka loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Munka> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Munka> list = new ArrayList<Munka>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Munka> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Munka> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

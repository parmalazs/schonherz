package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.schonherz.dbentities.ProfilKep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Profilkepek.
*/
public class ProfilKepDao extends AbstractDao<ProfilKep, Long> {

    public static final String TABLENAME = "Profilkepek";

    /**
     * Properties of entity ProfilKep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProfilKepID = new Property(0, Long.class, "profilKepID", true, "PROFIL_KEP_ID");
        public final static Property ProfilKepPath = new Property(1, String.class, "profilKepPath", false, "PROFIL_KEP_PATH");
        public final static Property ProfilKepDateTime = new Property(2, String.class, "profilKepDateTime", false, "PROFIL_KEP_DATE_TIME");
        public final static Property ProfilkepIsUploaded = new Property(3, Boolean.class, "profilkepIsUploaded", false, "PROFILKEP_IS_UPLOADED");
        public final static Property SoforID = new Property(4, Long.class, "soforID", false, "SOFOR_ID");
    };

    private DaoSession daoSession;

    private Query<ProfilKep> sofor_ProfilKepListQuery;

    public ProfilKepDao(DaoConfig config) {
        super(config);
    }
    
    public ProfilKepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Profilkepek' (" + //
                "'PROFIL_KEP_ID' INTEGER PRIMARY KEY ," + // 0: profilKepID
                "'PROFIL_KEP_PATH' TEXT," + // 1: profilKepPath
                "'PROFIL_KEP_DATE_TIME' TEXT," + // 2: profilKepDateTime
                "'PROFILKEP_IS_UPLOADED' INTEGER," + // 3: profilkepIsUploaded
                "'SOFOR_ID' INTEGER);"); // 4: soforID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Profilkepek'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProfilKep entity) {
        stmt.clearBindings();
 
        Long profilKepID = entity.getProfilKepID();
        if (profilKepID != null) {
            stmt.bindLong(1, profilKepID);
        }
 
        String profilKepPath = entity.getProfilKepPath();
        if (profilKepPath != null) {
            stmt.bindString(2, profilKepPath);
        }
 
        String profilKepDateTime = entity.getProfilKepDateTime();
        if (profilKepDateTime != null) {
            stmt.bindString(3, profilKepDateTime);
        }
 
        Boolean profilkepIsUploaded = entity.getProfilkepIsUploaded();
        if (profilkepIsUploaded != null) {
            stmt.bindLong(4, profilkepIsUploaded ? 1l: 0l);
        }
 
        Long soforID = entity.getSoforID();
        if (soforID != null) {
            stmt.bindLong(5, soforID);
        }
    }

    @Override
    protected void attachEntity(ProfilKep entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProfilKep readEntity(Cursor cursor, int offset) {
        ProfilKep entity = new ProfilKep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // profilKepID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // profilKepPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // profilKepDateTime
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // profilkepIsUploaded
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // soforID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProfilKep entity, int offset) {
        entity.setProfilKepID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProfilKepPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProfilKepDateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProfilkepIsUploaded(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSoforID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProfilKep entity, long rowId) {
        entity.setProfilKepID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProfilKep entity) {
        if(entity != null) {
            return entity.getProfilKepID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "profilKepList" to-many relationship of Sofor. */
    public synchronized List<ProfilKep> _querySofor_ProfilKepList(Long soforID) {
        if (sofor_ProfilKepListQuery == null) {
            QueryBuilder<ProfilKep> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.SoforID.eq(soforID));
            sofor_ProfilKepListQuery = queryBuilder.build();
        } else {
            sofor_ProfilKepListQuery.setParameter(0, soforID);
        }
        return sofor_ProfilKepListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSoforDao().getAllColumns());
            builder.append(" FROM Profilkepek T");
            builder.append(" LEFT JOIN Soforok T0 ON T.'SOFOR_ID'=T0.'SOFOR_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ProfilKep loadCurrentDeep(Cursor cursor, boolean lock) {
        ProfilKep entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sofor sofor = loadCurrentOther(daoSession.getSoforDao(), cursor, offset);
        entity.setSofor(sofor);

        return entity;    
    }

    public ProfilKep loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ProfilKep> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ProfilKep> list = new ArrayList<ProfilKep>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ProfilKep> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ProfilKep> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

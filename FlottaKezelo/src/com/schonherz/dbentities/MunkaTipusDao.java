package com.schonherz.dbentities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.schonherz.dbentities.MunkaTipus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Munkatipusok.
*/
public class MunkaTipusDao extends AbstractDao<MunkaTipus, Long> {

    public static final String TABLENAME = "Munkatipusok";

    /**
     * Properties of entity MunkaTipus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MunkaTipusID = new Property(0, Long.class, "munkaTipusID", true, "MUNKA_TIPUS_ID");
        public final static Property MunkaTipusNev = new Property(1, String.class, "munkaTipusNev", false, "MUNKA_TIPUS_NEV");
    };

    private DaoSession daoSession;


    public MunkaTipusDao(DaoConfig config) {
        super(config);
    }
    
    public MunkaTipusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Munkatipusok' (" + //
                "'MUNKA_TIPUS_ID' INTEGER PRIMARY KEY ," + // 0: munkaTipusID
                "'MUNKA_TIPUS_NEV' TEXT);"); // 1: munkaTipusNev
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Munkatipusok'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MunkaTipus entity) {
        stmt.clearBindings();
 
        Long munkaTipusID = entity.getMunkaTipusID();
        if (munkaTipusID != null) {
            stmt.bindLong(1, munkaTipusID);
        }
 
        String munkaTipusNev = entity.getMunkaTipusNev();
        if (munkaTipusNev != null) {
            stmt.bindString(2, munkaTipusNev);
        }
    }

    @Override
    protected void attachEntity(MunkaTipus entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MunkaTipus readEntity(Cursor cursor, int offset) {
        MunkaTipus entity = new MunkaTipus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // munkaTipusID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // munkaTipusNev
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MunkaTipus entity, int offset) {
        entity.setMunkaTipusID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMunkaTipusNev(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MunkaTipus entity, long rowId) {
        entity.setMunkaTipusID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MunkaTipus entity) {
        if(entity != null) {
            return entity.getMunkaTipusID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

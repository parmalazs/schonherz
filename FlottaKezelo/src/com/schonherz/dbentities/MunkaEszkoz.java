package com.schonherz.dbentities;

import com.schonherz.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MunkaEszkozok.
 */
public class MunkaEszkoz {

    private Long munkaEszkozID;
    private String munkaEszkozNev;
    private Long munkaEszkozAr;
    private Long munkaID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MunkaEszkozDao myDao;

    private Munka munka;
    private Long munka__resolvedKey;


    public MunkaEszkoz() {
    }

    public MunkaEszkoz(Long munkaEszkozID) {
        this.munkaEszkozID = munkaEszkozID;
    }

    public MunkaEszkoz(Long munkaEszkozID, String munkaEszkozNev, Long munkaEszkozAr, Long munkaID) {
        this.munkaEszkozID = munkaEszkozID;
        this.munkaEszkozNev = munkaEszkozNev;
        this.munkaEszkozAr = munkaEszkozAr;
        this.munkaID = munkaID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMunkaEszkozDao() : null;
    }

    public Long getMunkaEszkozID() {
        return munkaEszkozID;
    }

    public void setMunkaEszkozID(Long munkaEszkozID) {
        this.munkaEszkozID = munkaEszkozID;
    }

    public String getMunkaEszkozNev() {
        return munkaEszkozNev;
    }

    public void setMunkaEszkozNev(String munkaEszkozNev) {
        this.munkaEszkozNev = munkaEszkozNev;
    }

    public Long getMunkaEszkozAr() {
        return munkaEszkozAr;
    }

    public void setMunkaEszkozAr(Long munkaEszkozAr) {
        this.munkaEszkozAr = munkaEszkozAr;
    }

    public Long getMunkaID() {
        return munkaID;
    }

    public void setMunkaID(Long munkaID) {
        this.munkaID = munkaID;
    }

    /** To-one relationship, resolved on first access. */
    public Munka getMunka() {
        if (munka__resolvedKey == null || !munka__resolvedKey.equals(munkaID)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MunkaDao targetDao = daoSession.getMunkaDao();
            munka = targetDao.load(munkaID);
            munka__resolvedKey = munkaID;
        }
        return munka;
    }

    public void setMunka(Munka munka) {
        this.munka = munka;
        munkaID = munka == null ? null : munka.getMunkaID();
        munka__resolvedKey = munkaID;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

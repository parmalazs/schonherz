package com.schonherz.dbentities;

import java.util.List;
import com.schonherz.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table Partnerek.
 */
public class Partner {

    private Long partnerID;
    private String partnerNev;
    private String partnerCim;
    private Float partnerXkoordinata;
    private Float partnerYkoodinata;
    private String partnerTelefonszam;
    private String partnerWeboldal;
    private String partnerEmailcim;
    private Boolean partnerIsActive;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PartnerDao myDao;

    private List<PartnerKep> partnerKepList;
    private List<Munka> munkaList;

    public Partner() {
    }

    public Partner(Long partnerID) {
        this.partnerID = partnerID;
    }

    public Partner(Long partnerID, String partnerNev, String partnerCim, Float partnerXkoordinata, Float partnerYkoodinata, String partnerTelefonszam, String partnerWeboldal, String partnerEmailcim, Boolean partnerIsActive) {
        this.partnerID = partnerID;
        this.partnerNev = partnerNev;
        this.partnerCim = partnerCim;
        this.partnerXkoordinata = partnerXkoordinata;
        this.partnerYkoodinata = partnerYkoodinata;
        this.partnerTelefonszam = partnerTelefonszam;
        this.partnerWeboldal = partnerWeboldal;
        this.partnerEmailcim = partnerEmailcim;
        this.partnerIsActive = partnerIsActive;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPartnerDao() : null;
    }

    public Long getPartnerID() {
        return partnerID;
    }

    public void setPartnerID(Long partnerID) {
        this.partnerID = partnerID;
    }

    public String getPartnerNev() {
        return partnerNev;
    }

    public void setPartnerNev(String partnerNev) {
        this.partnerNev = partnerNev;
    }

    public String getPartnerCim() {
        return partnerCim;
    }

    public void setPartnerCim(String partnerCim) {
        this.partnerCim = partnerCim;
    }

    public Float getPartnerXkoordinata() {
        return partnerXkoordinata;
    }

    public void setPartnerXkoordinata(Float partnerXkoordinata) {
        this.partnerXkoordinata = partnerXkoordinata;
    }

    public Float getPartnerYkoodinata() {
        return partnerYkoodinata;
    }

    public void setPartnerYkoodinata(Float partnerYkoodinata) {
        this.partnerYkoodinata = partnerYkoodinata;
    }

    public String getPartnerTelefonszam() {
        return partnerTelefonszam;
    }

    public void setPartnerTelefonszam(String partnerTelefonszam) {
        this.partnerTelefonszam = partnerTelefonszam;
    }

    public String getPartnerWeboldal() {
        return partnerWeboldal;
    }

    public void setPartnerWeboldal(String partnerWeboldal) {
        this.partnerWeboldal = partnerWeboldal;
    }

    public String getPartnerEmailcim() {
        return partnerEmailcim;
    }

    public void setPartnerEmailcim(String partnerEmailcim) {
        this.partnerEmailcim = partnerEmailcim;
    }

    public Boolean getPartnerIsActive() {
        return partnerIsActive;
    }

    public void setPartnerIsActive(Boolean partnerIsActive) {
        this.partnerIsActive = partnerIsActive;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<PartnerKep> getPartnerKepList() {
        if (partnerKepList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PartnerKepDao targetDao = daoSession.getPartnerKepDao();
            partnerKepList = targetDao._queryPartner_PartnerKepList(partnerID);
        }
        return partnerKepList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPartnerKepList() {
        partnerKepList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Munka> getMunkaList() {
        if (munkaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MunkaDao targetDao = daoSession.getMunkaDao();
            munkaList = targetDao._queryPartner_MunkaList(partnerID);
        }
        return munkaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMunkaList() {
        munkaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

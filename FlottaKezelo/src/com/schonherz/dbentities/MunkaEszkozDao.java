package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.schonherz.dbentities.MunkaEszkoz;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MunkaEszkozok.
*/
public class MunkaEszkozDao extends AbstractDao<MunkaEszkoz, Long> {

    public static final String TABLENAME = "MunkaEszkozok";

    /**
     * Properties of entity MunkaEszkoz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MunkaEszkozID = new Property(0, Long.class, "munkaEszkozID", true, "MUNKA_ESZKOZ_ID");
        public final static Property MunkaEszkozNev = new Property(1, String.class, "munkaEszkozNev", false, "MUNKA_ESZKOZ_NEV");
        public final static Property MunkaEszkozAr = new Property(2, Long.class, "munkaEszkozAr", false, "MUNKA_ESZKOZ_AR");
        public final static Property MunkaID = new Property(3, Long.class, "munkaID", false, "MUNKA_ID");
    };

    private DaoSession daoSession;

    private Query<MunkaEszkoz> munka_MunkaEszkozListQuery;

    public MunkaEszkozDao(DaoConfig config) {
        super(config);
    }
    
    public MunkaEszkozDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MunkaEszkozok' (" + //
                "'MUNKA_ESZKOZ_ID' INTEGER PRIMARY KEY ," + // 0: munkaEszkozID
                "'MUNKA_ESZKOZ_NEV' TEXT," + // 1: munkaEszkozNev
                "'MUNKA_ESZKOZ_AR' INTEGER," + // 2: munkaEszkozAr
                "'MUNKA_ID' INTEGER);"); // 3: munkaID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MunkaEszkozok'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MunkaEszkoz entity) {
        stmt.clearBindings();
 
        Long munkaEszkozID = entity.getMunkaEszkozID();
        if (munkaEszkozID != null) {
            stmt.bindLong(1, munkaEszkozID);
        }
 
        String munkaEszkozNev = entity.getMunkaEszkozNev();
        if (munkaEszkozNev != null) {
            stmt.bindString(2, munkaEszkozNev);
        }
 
        Long munkaEszkozAr = entity.getMunkaEszkozAr();
        if (munkaEszkozAr != null) {
            stmt.bindLong(3, munkaEszkozAr);
        }
 
        Long munkaID = entity.getMunkaID();
        if (munkaID != null) {
            stmt.bindLong(4, munkaID);
        }
    }

    @Override
    protected void attachEntity(MunkaEszkoz entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MunkaEszkoz readEntity(Cursor cursor, int offset) {
        MunkaEszkoz entity = new MunkaEszkoz( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // munkaEszkozID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // munkaEszkozNev
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // munkaEszkozAr
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // munkaID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MunkaEszkoz entity, int offset) {
        entity.setMunkaEszkozID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMunkaEszkozNev(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMunkaEszkozAr(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMunkaID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MunkaEszkoz entity, long rowId) {
        entity.setMunkaEszkozID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MunkaEszkoz entity) {
        if(entity != null) {
            return entity.getMunkaEszkozID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "munkaEszkozList" to-many relationship of Munka. */
    public synchronized List<MunkaEszkoz> _queryMunka_MunkaEszkozList(Long munkaID) {
        if (munka_MunkaEszkozListQuery == null) {
            QueryBuilder<MunkaEszkoz> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.MunkaID.eq(munkaID));
            munka_MunkaEszkozListQuery = queryBuilder.build();
        } else {
            munka_MunkaEszkozListQuery.setParameter(0, munkaID);
        }
        return munka_MunkaEszkozListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMunkaDao().getAllColumns());
            builder.append(" FROM MunkaEszkozok T");
            builder.append(" LEFT JOIN Munkak T0 ON T.'MUNKA_ID'=T0.'MUNKA_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MunkaEszkoz loadCurrentDeep(Cursor cursor, boolean lock) {
        MunkaEszkoz entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Munka munka = loadCurrentOther(daoSession.getMunkaDao(), cursor, offset);
        entity.setMunka(munka);

        return entity;    
    }

    public MunkaEszkoz loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MunkaEszkoz> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MunkaEszkoz> list = new ArrayList<MunkaEszkoz>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MunkaEszkoz> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MunkaEszkoz> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

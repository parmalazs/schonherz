package com.schonherz.dbentities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.schonherz.dbentities.MunkaEszkoz;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MunkaEszkozok.
*/
public class MunkaEszkozDao extends AbstractDao<MunkaEszkoz, Long> {

    public static final String TABLENAME = "MunkaEszkozok";

    /**
     * Properties of entity MunkaEszkoz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MunkaEszkozID = new Property(0, Long.class, "munkaEszkozID", true, "MUNKA_ESZKOZ_ID");
        public final static Property MunkaEszkozNev = new Property(1, String.class, "munkaEszkozNev", false, "MUNKA_ESZKOZ_NEV");
        public final static Property MunkaEszkozAr = new Property(2, Long.class, "munkaEszkozAr", false, "MUNKA_ESZKOZ_AR");
    };


    public MunkaEszkozDao(DaoConfig config) {
        super(config);
    }
    
    public MunkaEszkozDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MunkaEszkozok' (" + //
                "'MUNKA_ESZKOZ_ID' INTEGER PRIMARY KEY ," + // 0: munkaEszkozID
                "'MUNKA_ESZKOZ_NEV' TEXT," + // 1: munkaEszkozNev
                "'MUNKA_ESZKOZ_AR' INTEGER);"); // 2: munkaEszkozAr
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MunkaEszkozok'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MunkaEszkoz entity) {
        stmt.clearBindings();
 
        Long munkaEszkozID = entity.getMunkaEszkozID();
        if (munkaEszkozID != null) {
            stmt.bindLong(1, munkaEszkozID);
        }
 
        String munkaEszkozNev = entity.getMunkaEszkozNev();
        if (munkaEszkozNev != null) {
            stmt.bindString(2, munkaEszkozNev);
        }
 
        Long munkaEszkozAr = entity.getMunkaEszkozAr();
        if (munkaEszkozAr != null) {
            stmt.bindLong(3, munkaEszkozAr);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MunkaEszkoz readEntity(Cursor cursor, int offset) {
        MunkaEszkoz entity = new MunkaEszkoz( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // munkaEszkozID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // munkaEszkozNev
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // munkaEszkozAr
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MunkaEszkoz entity, int offset) {
        entity.setMunkaEszkozID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMunkaEszkozNev(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMunkaEszkozAr(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MunkaEszkoz entity, long rowId) {
        entity.setMunkaEszkozID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MunkaEszkoz entity) {
        if(entity != null) {
            return entity.getMunkaEszkozID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.schonherz.dbentities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.schonherz.dbentities.PushMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PushMessages.
*/
public class PushMessageDao extends AbstractDao<PushMessage, Long> {

    public static final String TABLENAME = "PushMessages";

    /**
     * Properties of entity PushMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PushMessageID = new Property(0, Long.class, "pushMessageID", true, "PUSH_MESSAGE_ID");
        public final static Property PushMessageText = new Property(1, String.class, "pushMessageText", false, "PUSH_MESSAGE_TEXT");
        public final static Property PushMessageDate = new Property(2, String.class, "pushMessageDate", false, "PUSH_MESSAGE_DATE");
    };


    public PushMessageDao(DaoConfig config) {
        super(config);
    }
    
    public PushMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PushMessages' (" + //
                "'PUSH_MESSAGE_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pushMessageID
                "'PUSH_MESSAGE_TEXT' TEXT," + // 1: pushMessageText
                "'PUSH_MESSAGE_DATE' TEXT);"); // 2: pushMessageDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PushMessages'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PushMessage entity) {
        stmt.clearBindings();
 
        Long pushMessageID = entity.getPushMessageID();
        if (pushMessageID != null) {
            stmt.bindLong(1, pushMessageID);
        }
 
        String pushMessageText = entity.getPushMessageText();
        if (pushMessageText != null) {
            stmt.bindString(2, pushMessageText);
        }
 
        String pushMessageDate = entity.getPushMessageDate();
        if (pushMessageDate != null) {
            stmt.bindString(3, pushMessageDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PushMessage readEntity(Cursor cursor, int offset) {
        PushMessage entity = new PushMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pushMessageID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pushMessageText
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // pushMessageDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PushMessage entity, int offset) {
        entity.setPushMessageID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPushMessageText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPushMessageDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PushMessage entity, long rowId) {
        entity.setPushMessageID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PushMessage entity) {
        if(entity != null) {
            return entity.getPushMessageID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

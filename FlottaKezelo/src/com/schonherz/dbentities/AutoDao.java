package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.schonherz.dbentities.Auto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Autok.
*/
public class AutoDao extends AbstractDao<Auto, Long> {

    public static final String TABLENAME = "Autok";

    /**
     * Properties of entity Auto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AutoID = new Property(0, Long.class, "autoID", true, "AUTO_ID");
        public final static Property AutoXkoordinata = new Property(1, Float.class, "autoXkoordinata", false, "AUTO_XKOORDINATA");
        public final static Property AutoYkoordinata = new Property(2, Float.class, "autoYkoordinata", false, "AUTO_YKOORDINATA");
        public final static Property AutoNev = new Property(3, String.class, "autoNev", false, "AUTO_NEV");
        public final static Property AutoTipus = new Property(4, String.class, "autoTipus", false, "AUTO_TIPUS");
        public final static Property AutoRendszam = new Property(5, String.class, "autoRendszam", false, "AUTO_RENDSZAM");
        public final static Property AutoKilometerOra = new Property(6, Long.class, "autoKilometerOra", false, "AUTO_KILOMETER_ORA");
        public final static Property AutoUzemanyag = new Property(7, Long.class, "autoUzemanyag", false, "AUTO_UZEMANYAG");
        public final static Property AutoMuszakiVizsgaDate = new Property(8, String.class, "autoMuszakiVizsgaDate", false, "AUTO_MUSZAKI_VIZSGA_DATE");
        public final static Property AutoLastSzervizDate = new Property(9, String.class, "autoLastSzervizDate", false, "AUTO_LAST_SZERVIZ_DATE");
        public final static Property AutoLastUpDate = new Property(10, String.class, "autoLastUpDate", false, "AUTO_LAST_UP_DATE");
        public final static Property AutoFoglalt = new Property(11, Boolean.class, "autoFoglalt", false, "AUTO_FOGLALT");
        public final static Property AutoLastSoforID = new Property(12, Long.class, "autoLastSoforID", false, "AUTO_LAST_SOFOR_ID");
        public final static Property AutoProfilKepID = new Property(13, Long.class, "autoProfilKepID", false, "AUTO_PROFIL_KEP_ID");
        public final static Property AutoLastTelephelyID = new Property(14, Long.class, "autoLastTelephelyID", false, "AUTO_LAST_TELEPHELY_ID");
    };

    private DaoSession daoSession;

    private Query<Auto> telephely_AutoListQuery;

    public AutoDao(DaoConfig config) {
        super(config);
    }
    
    public AutoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Autok' (" + //
                "'AUTO_ID' INTEGER PRIMARY KEY ," + // 0: autoID
                "'AUTO_XKOORDINATA' REAL," + // 1: autoXkoordinata
                "'AUTO_YKOORDINATA' REAL," + // 2: autoYkoordinata
                "'AUTO_NEV' TEXT," + // 3: autoNev
                "'AUTO_TIPUS' TEXT," + // 4: autoTipus
                "'AUTO_RENDSZAM' TEXT," + // 5: autoRendszam
                "'AUTO_KILOMETER_ORA' INTEGER," + // 6: autoKilometerOra
                "'AUTO_UZEMANYAG' INTEGER," + // 7: autoUzemanyag
                "'AUTO_MUSZAKI_VIZSGA_DATE' TEXT," + // 8: autoMuszakiVizsgaDate
                "'AUTO_LAST_SZERVIZ_DATE' TEXT," + // 9: autoLastSzervizDate
                "'AUTO_LAST_UP_DATE' TEXT," + // 10: autoLastUpDate
                "'AUTO_FOGLALT' INTEGER," + // 11: autoFoglalt
                "'AUTO_LAST_SOFOR_ID' INTEGER," + // 12: autoLastSoforID
                "'AUTO_PROFIL_KEP_ID' INTEGER," + // 13: autoProfilKepID
                "'AUTO_LAST_TELEPHELY_ID' INTEGER);"); // 14: autoLastTelephelyID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Autok'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Auto entity) {
        stmt.clearBindings();
 
        Long autoID = entity.getAutoID();
        if (autoID != null) {
            stmt.bindLong(1, autoID);
        }
 
        Float autoXkoordinata = entity.getAutoXkoordinata();
        if (autoXkoordinata != null) {
            stmt.bindDouble(2, autoXkoordinata);
        }
 
        Float autoYkoordinata = entity.getAutoYkoordinata();
        if (autoYkoordinata != null) {
            stmt.bindDouble(3, autoYkoordinata);
        }
 
        String autoNev = entity.getAutoNev();
        if (autoNev != null) {
            stmt.bindString(4, autoNev);
        }
 
        String autoTipus = entity.getAutoTipus();
        if (autoTipus != null) {
            stmt.bindString(5, autoTipus);
        }
 
        String autoRendszam = entity.getAutoRendszam();
        if (autoRendszam != null) {
            stmt.bindString(6, autoRendszam);
        }
 
        Long autoKilometerOra = entity.getAutoKilometerOra();
        if (autoKilometerOra != null) {
            stmt.bindLong(7, autoKilometerOra);
        }
 
        Long autoUzemanyag = entity.getAutoUzemanyag();
        if (autoUzemanyag != null) {
            stmt.bindLong(8, autoUzemanyag);
        }
 
        String autoMuszakiVizsgaDate = entity.getAutoMuszakiVizsgaDate();
        if (autoMuszakiVizsgaDate != null) {
            stmt.bindString(9, autoMuszakiVizsgaDate);
        }
 
        String autoLastSzervizDate = entity.getAutoLastSzervizDate();
        if (autoLastSzervizDate != null) {
            stmt.bindString(10, autoLastSzervizDate);
        }
 
        String autoLastUpDate = entity.getAutoLastUpDate();
        if (autoLastUpDate != null) {
            stmt.bindString(11, autoLastUpDate);
        }
 
        Boolean autoFoglalt = entity.getAutoFoglalt();
        if (autoFoglalt != null) {
            stmt.bindLong(12, autoFoglalt ? 1l: 0l);
        }
 
        Long autoLastSoforID = entity.getAutoLastSoforID();
        if (autoLastSoforID != null) {
            stmt.bindLong(13, autoLastSoforID);
        }
 
        Long autoProfilKepID = entity.getAutoProfilKepID();
        if (autoProfilKepID != null) {
            stmt.bindLong(14, autoProfilKepID);
        }
 
        Long autoLastTelephelyID = entity.getAutoLastTelephelyID();
        if (autoLastTelephelyID != null) {
            stmt.bindLong(15, autoLastTelephelyID);
        }
    }

    @Override
    protected void attachEntity(Auto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Auto readEntity(Cursor cursor, int offset) {
        Auto entity = new Auto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // autoID
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // autoXkoordinata
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // autoYkoordinata
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // autoNev
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // autoTipus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // autoRendszam
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // autoKilometerOra
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // autoUzemanyag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // autoMuszakiVizsgaDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // autoLastSzervizDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // autoLastUpDate
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // autoFoglalt
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // autoLastSoforID
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // autoProfilKepID
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // autoLastTelephelyID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Auto entity, int offset) {
        entity.setAutoID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAutoXkoordinata(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setAutoYkoordinata(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setAutoNev(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAutoTipus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAutoRendszam(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAutoKilometerOra(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAutoUzemanyag(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setAutoMuszakiVizsgaDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAutoLastSzervizDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAutoLastUpDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAutoFoglalt(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setAutoLastSoforID(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setAutoProfilKepID(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setAutoLastTelephelyID(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Auto entity, long rowId) {
        entity.setAutoID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Auto entity) {
        if(entity != null) {
            return entity.getAutoID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "autoList" to-many relationship of Telephely. */
    public synchronized List<Auto> _queryTelephely_AutoList(Long autoLastTelephelyID) {
        if (telephely_AutoListQuery == null) {
            QueryBuilder<Auto> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.AutoLastTelephelyID.eq(autoLastTelephelyID));
            telephely_AutoListQuery = queryBuilder.build();
        } else {
            telephely_AutoListQuery.setParameter(0, autoLastTelephelyID);
        }
        return telephely_AutoListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSoforDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAutoKepDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTelephelyDao().getAllColumns());
            builder.append(" FROM Autok T");
            builder.append(" LEFT JOIN Soforok T0 ON T.'AUTO_LAST_SOFOR_ID'=T0.'SOFOR_ID'");
            builder.append(" LEFT JOIN Autokepek T1 ON T.'AUTO_PROFIL_KEP_ID'=T1.'AUTO_KEP_ID'");
            builder.append(" LEFT JOIN Telephelyek T2 ON T.'AUTO_LAST_TELEPHELY_ID'=T2.'TELEPHELY_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Auto loadCurrentDeep(Cursor cursor, boolean lock) {
        Auto entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Sofor sofor = loadCurrentOther(daoSession.getSoforDao(), cursor, offset);
        entity.setSofor(sofor);
        offset += daoSession.getSoforDao().getAllColumns().length;

        AutoKep autoKep = loadCurrentOther(daoSession.getAutoKepDao(), cursor, offset);
        entity.setAutoKep(autoKep);
        offset += daoSession.getAutoKepDao().getAllColumns().length;

        Telephely telephely = loadCurrentOther(daoSession.getTelephelyDao(), cursor, offset);
        entity.setTelephely(telephely);

        return entity;    
    }

    public Auto loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Auto> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Auto> list = new ArrayList<Auto>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Auto> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Auto> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package com.schonherz.dbentities;

import java.util.List;
import com.schonherz.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table Autok.
 */
public class Auto {

    private Long autoID;
    private Float autoXkoordinata;
    private Float autoYkoordinata;
    private String autoNev;
    private String autoTipus;
    private String autoRendszam;
    private Long autoKilometerOra;
    private Long autoUzemanyag;
    private String autoMuszakiVizsgaDate;
    private String autoLastSzervizDate;
    private String autoLastUpDate;
    private Boolean autoFoglalt;
    private Long autoLastSoforID;
    private Long autoProfilKepID;
    private Long autoLastTelephelyID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AutoDao myDao;

    private Sofor sofor;
    private Long sofor__resolvedKey;

    private AutoKep autoKep;
    private Long autoKep__resolvedKey;

    private Telephely telephely;
    private Long telephely__resolvedKey;

    private List<AutoKep> autoKepList;

    public Auto() {
    }

    public Auto(Long autoID) {
        this.autoID = autoID;
    }

    public Auto(Long autoID, Float autoXkoordinata, Float autoYkoordinata, String autoNev, String autoTipus, String autoRendszam, Long autoKilometerOra, Long autoUzemanyag, String autoMuszakiVizsgaDate, String autoLastSzervizDate, String autoLastUpDate, Boolean autoFoglalt, Long autoLastSoforID, Long autoProfilKepID, Long autoLastTelephelyID) {
        this.autoID = autoID;
        this.autoXkoordinata = autoXkoordinata;
        this.autoYkoordinata = autoYkoordinata;
        this.autoNev = autoNev;
        this.autoTipus = autoTipus;
        this.autoRendszam = autoRendszam;
        this.autoKilometerOra = autoKilometerOra;
        this.autoUzemanyag = autoUzemanyag;
        this.autoMuszakiVizsgaDate = autoMuszakiVizsgaDate;
        this.autoLastSzervizDate = autoLastSzervizDate;
        this.autoLastUpDate = autoLastUpDate;
        this.autoFoglalt = autoFoglalt;
        this.autoLastSoforID = autoLastSoforID;
        this.autoProfilKepID = autoProfilKepID;
        this.autoLastTelephelyID = autoLastTelephelyID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAutoDao() : null;
    }

    public Long getAutoID() {
        return autoID;
    }

    public void setAutoID(Long autoID) {
        this.autoID = autoID;
    }

    public Float getAutoXkoordinata() {
        return autoXkoordinata;
    }

    public void setAutoXkoordinata(Float autoXkoordinata) {
        this.autoXkoordinata = autoXkoordinata;
    }

    public Float getAutoYkoordinata() {
        return autoYkoordinata;
    }

    public void setAutoYkoordinata(Float autoYkoordinata) {
        this.autoYkoordinata = autoYkoordinata;
    }

    public String getAutoNev() {
        return autoNev;
    }

    public void setAutoNev(String autoNev) {
        this.autoNev = autoNev;
    }

    public String getAutoTipus() {
        return autoTipus;
    }

    public void setAutoTipus(String autoTipus) {
        this.autoTipus = autoTipus;
    }

    public String getAutoRendszam() {
        return autoRendszam;
    }

    public void setAutoRendszam(String autoRendszam) {
        this.autoRendszam = autoRendszam;
    }

    public Long getAutoKilometerOra() {
        return autoKilometerOra;
    }

    public void setAutoKilometerOra(Long autoKilometerOra) {
        this.autoKilometerOra = autoKilometerOra;
    }

    public Long getAutoUzemanyag() {
        return autoUzemanyag;
    }

    public void setAutoUzemanyag(Long autoUzemanyag) {
        this.autoUzemanyag = autoUzemanyag;
    }

    public String getAutoMuszakiVizsgaDate() {
        return autoMuszakiVizsgaDate;
    }

    public void setAutoMuszakiVizsgaDate(String autoMuszakiVizsgaDate) {
        this.autoMuszakiVizsgaDate = autoMuszakiVizsgaDate;
    }

    public String getAutoLastSzervizDate() {
        return autoLastSzervizDate;
    }

    public void setAutoLastSzervizDate(String autoLastSzervizDate) {
        this.autoLastSzervizDate = autoLastSzervizDate;
    }

    public String getAutoLastUpDate() {
        return autoLastUpDate;
    }

    public void setAutoLastUpDate(String autoLastUpDate) {
        this.autoLastUpDate = autoLastUpDate;
    }

    public Boolean getAutoFoglalt() {
        return autoFoglalt;
    }

    public void setAutoFoglalt(Boolean autoFoglalt) {
        this.autoFoglalt = autoFoglalt;
    }

    public Long getAutoLastSoforID() {
        return autoLastSoforID;
    }

    public void setAutoLastSoforID(Long autoLastSoforID) {
        this.autoLastSoforID = autoLastSoforID;
    }

    public Long getAutoProfilKepID() {
        return autoProfilKepID;
    }

    public void setAutoProfilKepID(Long autoProfilKepID) {
        this.autoProfilKepID = autoProfilKepID;
    }

    public Long getAutoLastTelephelyID() {
        return autoLastTelephelyID;
    }

    public void setAutoLastTelephelyID(Long autoLastTelephelyID) {
        this.autoLastTelephelyID = autoLastTelephelyID;
    }

    /** To-one relationship, resolved on first access. */
    public Sofor getSofor() {
        if (sofor__resolvedKey == null || !sofor__resolvedKey.equals(autoLastSoforID)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SoforDao targetDao = daoSession.getSoforDao();
            sofor = targetDao.load(autoLastSoforID);
            sofor__resolvedKey = autoLastSoforID;
        }
        return sofor;
    }

    public void setSofor(Sofor sofor) {
        this.sofor = sofor;
        autoLastSoforID = sofor == null ? null : sofor.getSoforID();
        sofor__resolvedKey = autoLastSoforID;
    }

    /** To-one relationship, resolved on first access. */
    public AutoKep getAutoKep() {
        if (autoKep__resolvedKey == null || !autoKep__resolvedKey.equals(autoProfilKepID)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AutoKepDao targetDao = daoSession.getAutoKepDao();
            autoKep = targetDao.load(autoProfilKepID);
            autoKep__resolvedKey = autoProfilKepID;
        }
        return autoKep;
    }

    public void setAutoKep(AutoKep autoKep) {
        this.autoKep = autoKep;
        autoProfilKepID = autoKep == null ? null : autoKep.getAutoKepID();
        autoKep__resolvedKey = autoProfilKepID;
    }

    /** To-one relationship, resolved on first access. */
    public Telephely getTelephely() {
        if (telephely__resolvedKey == null || !telephely__resolvedKey.equals(autoLastTelephelyID)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TelephelyDao targetDao = daoSession.getTelephelyDao();
            telephely = targetDao.load(autoLastTelephelyID);
            telephely__resolvedKey = autoLastTelephelyID;
        }
        return telephely;
    }

    public void setTelephely(Telephely telephely) {
        this.telephely = telephely;
        autoLastTelephelyID = telephely == null ? null : telephely.getTelephelyID();
        telephely__resolvedKey = autoLastTelephelyID;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<AutoKep> getAutoKepList() {
        if (autoKepList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AutoKepDao targetDao = daoSession.getAutoKepDao();
            autoKepList = targetDao._queryAuto_AutoKepList(autoID);
        }
        return autoKepList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAutoKepList() {
        autoKepList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

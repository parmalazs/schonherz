package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.schonherz.dbentities.MunkaKep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Munkakepek.
*/
public class MunkaKepDao extends AbstractDao<MunkaKep, Long> {

    public static final String TABLENAME = "Munkakepek";

    /**
     * Properties of entity MunkaKep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MunkaKepID = new Property(0, Long.class, "munkaKepID", true, "MUNKA_KEP_ID");
        public final static Property MunkaKepPath = new Property(1, String.class, "munkaKepPath", false, "MUNKA_KEP_PATH");
        public final static Property MunkaKepDate = new Property(2, String.class, "munkaKepDate", false, "MUNKA_KEP_DATE");
        public final static Property MunkaKepIsUploaded = new Property(3, Boolean.class, "munkaKepIsUploaded", false, "MUNKA_KEP_IS_UPLOADED");
        public final static Property MunkaKepIsActive = new Property(4, Boolean.class, "munkaKepIsActive", false, "MUNKA_KEP_IS_ACTIVE");
        public final static Property MunkaID = new Property(5, Long.class, "munkaID", false, "MUNKA_ID");
    };

    private DaoSession daoSession;

    private Query<MunkaKep> munka_MunkaKepListQuery;

    public MunkaKepDao(DaoConfig config) {
        super(config);
    }
    
    public MunkaKepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Munkakepek' (" + //
                "'MUNKA_KEP_ID' INTEGER PRIMARY KEY ," + // 0: munkaKepID
                "'MUNKA_KEP_PATH' TEXT," + // 1: munkaKepPath
                "'MUNKA_KEP_DATE' TEXT," + // 2: munkaKepDate
                "'MUNKA_KEP_IS_UPLOADED' INTEGER," + // 3: munkaKepIsUploaded
                "'MUNKA_KEP_IS_ACTIVE' INTEGER," + // 4: munkaKepIsActive
                "'MUNKA_ID' INTEGER);"); // 5: munkaID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Munkakepek'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MunkaKep entity) {
        stmt.clearBindings();
 
        Long munkaKepID = entity.getMunkaKepID();
        if (munkaKepID != null) {
            stmt.bindLong(1, munkaKepID);
        }
 
        String munkaKepPath = entity.getMunkaKepPath();
        if (munkaKepPath != null) {
            stmt.bindString(2, munkaKepPath);
        }
 
        String munkaKepDate = entity.getMunkaKepDate();
        if (munkaKepDate != null) {
            stmt.bindString(3, munkaKepDate);
        }
 
        Boolean munkaKepIsUploaded = entity.getMunkaKepIsUploaded();
        if (munkaKepIsUploaded != null) {
            stmt.bindLong(4, munkaKepIsUploaded ? 1l: 0l);
        }
 
        Boolean munkaKepIsActive = entity.getMunkaKepIsActive();
        if (munkaKepIsActive != null) {
            stmt.bindLong(5, munkaKepIsActive ? 1l: 0l);
        }
 
        Long munkaID = entity.getMunkaID();
        if (munkaID != null) {
            stmt.bindLong(6, munkaID);
        }
    }

    @Override
    protected void attachEntity(MunkaKep entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MunkaKep readEntity(Cursor cursor, int offset) {
        MunkaKep entity = new MunkaKep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // munkaKepID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // munkaKepPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // munkaKepDate
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // munkaKepIsUploaded
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // munkaKepIsActive
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // munkaID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MunkaKep entity, int offset) {
        entity.setMunkaKepID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMunkaKepPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMunkaKepDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMunkaKepIsUploaded(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setMunkaKepIsActive(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setMunkaID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MunkaKep entity, long rowId) {
        entity.setMunkaKepID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MunkaKep entity) {
        if(entity != null) {
            return entity.getMunkaKepID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "munkaKepList" to-many relationship of Munka. */
    public synchronized List<MunkaKep> _queryMunka_MunkaKepList(Long munkaID) {
        if (munka_MunkaKepListQuery == null) {
            QueryBuilder<MunkaKep> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.MunkaID.eq(munkaID));
            munka_MunkaKepListQuery = queryBuilder.build();
        } else {
            munka_MunkaKepListQuery.setParameter(0, munkaID);
        }
        return munka_MunkaKepListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMunkaDao().getAllColumns());
            builder.append(" FROM Munkakepek T");
            builder.append(" LEFT JOIN Munkak T0 ON T.'MUNKA_ID'=T0.'MUNKA_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MunkaKep loadCurrentDeep(Cursor cursor, boolean lock) {
        MunkaKep entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Munka munka = loadCurrentOther(daoSession.getMunkaDao(), cursor, offset);
        entity.setMunka(munka);

        return entity;    
    }

    public MunkaKep loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MunkaKep> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MunkaKep> list = new ArrayList<MunkaKep>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MunkaKep> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MunkaKep> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

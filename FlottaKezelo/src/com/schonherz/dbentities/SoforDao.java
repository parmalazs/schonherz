package com.schonherz.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.schonherz.dbentities.Sofor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Soforok.
*/
public class SoforDao extends AbstractDao<Sofor, Long> {

    public static final String TABLENAME = "Soforok";

    /**
     * Properties of entity Sofor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SoforID = new Property(0, Long.class, "soforID", true, "SOFOR_ID");
        public final static Property SoforNev = new Property(1, String.class, "soforNev", false, "SOFOR_NEV");
        public final static Property SoforCim = new Property(2, String.class, "soforCim", false, "SOFOR_CIM");
        public final static Property SoforTelefonszam = new Property(3, String.class, "soforTelefonszam", false, "SOFOR_TELEFONSZAM");
        public final static Property SoforLogin = new Property(4, String.class, "soforLogin", false, "SOFOR_LOGIN");
        public final static Property SoforPass = new Property(5, String.class, "soforPass", false, "SOFOR_PASS");
        public final static Property SoforBirthDate = new Property(6, String.class, "soforBirthDate", false, "SOFOR_BIRTH_DATE");
        public final static Property SoforRegTime = new Property(7, String.class, "soforRegTime", false, "SOFOR_REG_TIME");
        public final static Property SoforIsAmin = new Property(8, Boolean.class, "soforIsAmin", false, "SOFOR_IS_AMIN");
        public final static Property SoforEmail = new Property(9, String.class, "soforEmail", false, "SOFOR_EMAIL");
        public final static Property SoforProfilKepID = new Property(10, Long.class, "soforProfilKepID", false, "SOFOR_PROFIL_KEP_ID");
    };

    private DaoSession daoSession;


    public SoforDao(DaoConfig config) {
        super(config);
    }
    
    public SoforDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Soforok' (" + //
                "'SOFOR_ID' INTEGER PRIMARY KEY ," + // 0: soforID
                "'SOFOR_NEV' TEXT," + // 1: soforNev
                "'SOFOR_CIM' TEXT," + // 2: soforCim
                "'SOFOR_TELEFONSZAM' TEXT," + // 3: soforTelefonszam
                "'SOFOR_LOGIN' TEXT," + // 4: soforLogin
                "'SOFOR_PASS' TEXT," + // 5: soforPass
                "'SOFOR_BIRTH_DATE' TEXT," + // 6: soforBirthDate
                "'SOFOR_REG_TIME' TEXT," + // 7: soforRegTime
                "'SOFOR_IS_AMIN' INTEGER," + // 8: soforIsAmin
                "'SOFOR_EMAIL' TEXT," + // 9: soforEmail
                "'SOFOR_PROFIL_KEP_ID' INTEGER);"); // 10: soforProfilKepID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Soforok'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sofor entity) {
        stmt.clearBindings();
 
        Long soforID = entity.getSoforID();
        if (soforID != null) {
            stmt.bindLong(1, soforID);
        }
 
        String soforNev = entity.getSoforNev();
        if (soforNev != null) {
            stmt.bindString(2, soforNev);
        }
 
        String soforCim = entity.getSoforCim();
        if (soforCim != null) {
            stmt.bindString(3, soforCim);
        }
 
        String soforTelefonszam = entity.getSoforTelefonszam();
        if (soforTelefonszam != null) {
            stmt.bindString(4, soforTelefonszam);
        }
 
        String soforLogin = entity.getSoforLogin();
        if (soforLogin != null) {
            stmt.bindString(5, soforLogin);
        }
 
        String soforPass = entity.getSoforPass();
        if (soforPass != null) {
            stmt.bindString(6, soforPass);
        }
 
        String soforBirthDate = entity.getSoforBirthDate();
        if (soforBirthDate != null) {
            stmt.bindString(7, soforBirthDate);
        }
 
        String soforRegTime = entity.getSoforRegTime();
        if (soforRegTime != null) {
            stmt.bindString(8, soforRegTime);
        }
 
        Boolean soforIsAmin = entity.getSoforIsAmin();
        if (soforIsAmin != null) {
            stmt.bindLong(9, soforIsAmin ? 1l: 0l);
        }
 
        String soforEmail = entity.getSoforEmail();
        if (soforEmail != null) {
            stmt.bindString(10, soforEmail);
        }
 
        Long soforProfilKepID = entity.getSoforProfilKepID();
        if (soforProfilKepID != null) {
            stmt.bindLong(11, soforProfilKepID);
        }
    }

    @Override
    protected void attachEntity(Sofor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sofor readEntity(Cursor cursor, int offset) {
        Sofor entity = new Sofor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // soforID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // soforNev
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // soforCim
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // soforTelefonszam
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // soforLogin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // soforPass
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // soforBirthDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // soforRegTime
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // soforIsAmin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // soforEmail
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // soforProfilKepID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sofor entity, int offset) {
        entity.setSoforID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSoforNev(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSoforCim(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSoforTelefonszam(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSoforLogin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSoforPass(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSoforBirthDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSoforRegTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSoforIsAmin(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSoforEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSoforProfilKepID(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sofor entity, long rowId) {
        entity.setSoforID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sofor entity) {
        if(entity != null) {
            return entity.getSoforID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProfilKepDao().getAllColumns());
            builder.append(" FROM Soforok T");
            builder.append(" LEFT JOIN Profilkepek T0 ON T.'SOFOR_PROFIL_KEP_ID'=T0.'PROFIL_KEP_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Sofor loadCurrentDeep(Cursor cursor, boolean lock) {
        Sofor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ProfilKep profilKep = loadCurrentOther(daoSession.getProfilKepDao(), cursor, offset);
        entity.setProfilKep(profilKep);

        return entity;    
    }

    public Sofor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Sofor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Sofor> list = new ArrayList<Sofor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Sofor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Sofor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
